
#user jzjian jzjian;

worker_processes  1;

error_log  logs/error.log;
pid        logs/nginx.pid;


events {
    worker_connections  1024;
}



http {
    #lua_code_cache off;

    #default_type  application/octet-stream;

    access_log  logs/access.log;

    sendfile        on;

    keepalive_timeout  65;

    init_by_lua_block {
        local init = require 'lib.init'
    }

    server {
        listen       8090;
        server_name  wokeyi.org;

        root public;

        set $template_root templates;

        location / {
            content_by_lua_block {
                --[[
                local t = require 'lib.resty.template'
                t.render('test.html', {['title'] = 'hello baby'})
                ngx.say('template_root = ' .. ngx.var.template_root)
                ngx.req.read_body()
                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.say("failed to get post args: ", err)
                    return
                end
                for key, val in pairs(args) do
                    if type(val) == "table" then
                        ngx.say(key, ": ", table.concat(val, ", "))
                    else
                        ngx.say(ngx.unescape_uri(key), ": ", ngx.unescape_uri(val))
                    end
                end
                ]]
            }
        }

        location /papertypes {
            content_by_lua_block {
                ngx.say(require('lib.init').papertypes)
            }
        }

        location ~ /test/([0-9]+)/([0-9]+)/([0-9]+) {
            
            content_by_lua_block {
                local ptypestr = ngx.var[1]
                local ptype = tonumber(ptypestr)
                local qnum = tonumber(ngx.var[2])
                local randomseed = tonumber(ngx.var[3])
                local tp = require 'lib.testpapers'
                local paper = tp.makep(ptype, qnum, randomseed)
                if paper then
                    local ptypes = require 'conf.papertypes'
                    local template = require 'lib.resty.template'
                    template.render('test.html', {
                        ['title'] = ptypes[ptype].name,
                        ['qnum'] = qnum,
                        ['questions'] = table.concat(paper, ',')})
                else
                    ngx.exit(500)
                end
            }
        }

        location ~ /testpapers/([0-9]+)/([0-9]+)/([0-9]+) {
            content_by_lua_block {
                if ngx.req.get_method() ~= 'GET' then
                    ngx.exit(400)
                end

                local ptypestr = ngx.var[1]
                local ptype = tonumber(ptypestr)
                local count = tonumber(ngx.var[2])
                local randomseed = tonumber(ngx.var[3])
                local tp = require 'lib.testpapers'
                local paper = tp.makep(ptype, count, randomseed)
                if paper then
                    local json = require 'cjson'
                    ngx.say(json.encode{[ptypestr]=paper})
                else
                    ngx.exit(500)
                end
            }
        }

        location /answersheets {
            content_by_lua_block {
                local as = require 'lib.answersheets'
                local method = as[ngx.req.get_method()]
                if method then
                    method()
                else
                    ngx.exit(400)
                end
            }
        }

        location ~ ^/answersheets/([0-9]+)$ {
            content_by_lua_block {
                local sheetidstr = ngx.var[1]
                local sheetid = tonumber(sheetidstr)
                local single = require('lib.answersheets').single
                local method = single[ngx.req.get_method()]
                if method then
                    method(sheetid)
                else
                    ngx.exit(400)
                end
            }
        }

    }
}
